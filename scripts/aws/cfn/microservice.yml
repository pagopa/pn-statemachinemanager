AWSTemplateFormatVersion: 2010-09-09
Description: 'Example microservice deploy'

Parameters:
  ProjectName:
    Type: String
    Description: 'Usually pn can be pnXYZ where XYZ are the feature number, useful to create
      experimental environments without crash official development environment'

  AlarmSNSTopicArn:
    Type: String
    Description: ARN of alarm topic

  # WebApiDnsName:
  #   Type: String
  #   Description: 'The DNS name used for WEB rest API.'
  
  # CorsAllowedDomains:
  #   Type: String
  #   Description: 'Comma separated list of domains allowed to make cross origin request'

  ContainerImageUri:
    Type: String
    Description: 'Exact container image URI with full repository and image digest'

  MicroserviceNumber:
    Type: Number
    Description: 'Disambiguation useful for load balancer rules'

  TemplateBucketBaseUrl:
    Type: String
    Description: 'The S3 bucket from which to fetch the templates used by this stack.'

  ECSClusterName:
    Type: String
    Description: 'The name of the ECS cluster where the microservice is going to be deployed'

  SubnetsIds:
    Type: String
    Description: 'subnets ids comma separated list. Where to deploy the microservice'

  VpcId:
    Type: String
    Description: 'VpcId where the microservice is going to be deployed'
  
  EcsDefaultSecurityGroup:
    Type: String
    Description: 'Default security group required by infrastructure'
    Default: ""

  ApplicationLoadBalancerListenerArn:
    Type: String
    Description: 'Load balancer listener where HTTP endpoints is going to be registered'

  ApplicationLoadBalancerDomain:
    Type: String
    Description: 'Base URL of the load balancer where the service is going to be reachable'

  NetworkLoadBalancerLink:
    Type: String
    Description: 'network load balancer link for API-GW'
    Default: ''
  
  # LogsKinesisSourceStreamArn:
  #   Type: String
  #   Description: 'Kinesis stream that receive logs'
  
  Version:
    Type: String
    Description: 'keep track of used projects commitIds'

  PnSmTableNameClientStates:
    Type: String
    Description: 'Nome della Tabella DynamoDB relativa alla Macchina a Stati'
  
  PnSmTableArnClientStates:
    Type: String
    Description: 'ARN della Tabella DynamoDB relativa alla Macchina a Stati'
  
  PnSmManagedPolicyName:
    Type: String
    Description: 'Nome della managed policy associata alla state machine'
    Default: 'PnSmManagedPolicyName'
  

Resources:

  StateMachineManagerMicroservice:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "${TemplateBucketBaseUrl}/fragments/ecs-service.yaml"
      Parameters:
        MicroServiceUniqueName: !Sub '${ProjectName}-state-machine-manager'
        CpuValue: 1024
        MemoryAmount: 4GB
        AlarmSNSTopicArn: !Ref AlarmSNSTopicArn
        ContainerImageURI: !Sub '${ContainerImageUri}'
        ContainerEnvEntry1: !Sub 'AWS_REGIONCODE=${AWS::Region}'
        ContainerEnvEntry2: !Sub 'PnSmTableClientStates=${PnSmTableNameClientStates}'
        MappedPaths: '/statemachinemanager/*'
        ECSClusterName: !Ref ECSClusterName
        Subnets: !Ref SubnetsIds
        VpcId: !Ref VpcId
        EcsDefaultSecurityGroup: !Ref EcsDefaultSecurityGroup
        LoadBalancerListenerArn: !Ref ApplicationLoadBalancerListenerArn
        LoadbalancerRulePriority: !Ref MicroserviceNumber
        # CloudwatchLogKinesisStreamArn: !Ref LogsKinesisSourceStreamArn
        TaskRoleManagedPolicyArn: !Ref PnSmManagedPolicy
        # HealthCheckPath: 

  
  PnSmManagedPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: 'IAM Managed Policy for StateMachine Manager'
      # ManagedPolicyName: !Ref PnSmManagedPolicyName
      PolicyDocument: 
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 'dynamodb:*GetItem'
              - 'dynamodb:Query'
              - 'dynamodb:Describe*'
              - 'dynamodb:Scan'
              - 'dynamodb:List*'
            Resource:
              - !Sub "${PnSmTableArnClientStates}"


  StateMachineManagerMicroserviceAlarm:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "${TemplateBucketBaseUrl}/fragments/microservice-alarm.yaml"
      Parameters:
        MicroserviceName: !Sub '${ProjectName}-state-machine-manager'
        EvaluationPeriod: '10'
        DatapointsToAlarm: '1'
        Threshold: '1'

  StateMachineManagerMicroserviceAlarmDashboard:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "${TemplateBucketBaseUrl}/fragments/microservice-cloudwatch-dashboard.yaml"
      Parameters:
        DashboardName: !Sub '${ProjectName}-state-machine-manager'
        AlarmArns: !GetAtt StateMachineManagerMicroserviceAlarm.Outputs.MicroserviceAlarmArn
        DynamoDBTableNames: !Ref PnSmTableNameClientStates
        # RestApiStageArns:
        # RestApiNames:
        # QueueArns:
        # LambdaArns:
        # KinesisDataArns:
        # KinesisFirehoseArns:
        # EventRuleArns:
        # BucketNames:
        # LogGroupsNames: